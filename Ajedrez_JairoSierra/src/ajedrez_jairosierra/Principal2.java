/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ajedrez_jairosierra;


import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JOptionPane;

/**
 *
 * @author Jairo Sierra
 */
public class Principal2 extends javax.swing.JFrame {

    /**
     * Creates new form Principal2
     */
    public Principal2() {
        initComponents();
        ImageIcon img = new ImageIcon("./src/iconos/fondo.jpg");
        this.setLocationRelativeTo(null);
        this.setVisible(false);
        if (HayElementos()) {
            EliminarRecursiva(MatrizBotones, 7, 7);
            jp_botones.removeAll();
            RedibujarTablero();
        }
        if (ValidarDimensiones()) {
            MatrizBotones = new JButton[DimensionX][DimensionY];
            jp_botones.setLayout(new GridLayout(DimensionX, DimensionY));
            ObtenerObjetos(DimensionX, DimensionY);
            for (int contadorX = 0; contadorX < DimensionX; contadorX++) {
                for (int contadorY = 0; contadorY < DimensionY; contadorY++) {
                    JButton btnNuevo = new JButton();
                    if ((contadorX + contadorY) % 2 == 0) {
                        btnNuevo.setBackground(java.awt.Color.BLACK);
                    } else {
                        btnNuevo.setBackground(java.awt.Color.WHITE);
                    }
                    btnNuevo.setSize(TamX, TamY);
                    btnNuevo.setToolTipText(Integer.toString(contadorX) + "," + Integer.toString(contadorY));
                    MatrizBotones[contadorX][contadorY] = btnNuevo;
                    MatrizBotones[contadorX][contadorY].addActionListener(new ActionListener() {
                        public void actionPerformed(ActionEvent e) {
                            Click(btnNuevo);
                        }
                    });
                    jp_botones.add(MatrizBotones[contadorX][contadorY]);
                    RedibujarTablero();
                }
            }
        }
        for (int i = 0; i < MatrizBotones.length; i++) {
            for (int j = 0; j < MatrizBotones[i].length; j++) {
                if (i == 6) {
                    piezas[i][j] = new Peon("Blanco", i, j);
                }
                if (i == 1) {
                    piezas[i][j] = new Peon("Negro", i, j);
                }
                if ((i == 0 && j == 0) || (i == 0 && j == 7)) {
                    piezas[i][j] = new Torre("Negro", i, j);
                }
                if ((i == 7 && j == 0) || (i == 7 && j == 7)) {
                    piezas[i][j] = new Torre("Blanco", i, j);
                }
                if ((i == 7 && j == 1) || (i == 7 && j == 6)) {
                    piezas[i][j] = new Caballo("Blanco", i, j);
                }
                if ((i == 0 && j == 1) || (i == 0 && j == 6)) {
                    piezas[i][j] = new Caballo("Negro", i, j);
                }
                if ((i == 0 && j == 2) || (i == 0 && j == 5)) {
                    piezas[i][j] = new Alfil("Negro", i, j);
                }
                if ((i == 7 && j == 2) || (i == 7 && j == 5)) {
                    piezas[i][j] = new Alfil("Blanco", i, j);
                }
                if (j == 3) {
                    if (i == 0) {
                        piezas[i][j] = new Reina("Negro", i, j);
                    } else if (i == 7) {
                        piezas[i][j] = new Reina("Blanco", i, j);
                    }
                }
                if (j == 4) {
                    if (i == 0) {
                        piezas[i][j] = new Rey("Negro", i, j);
                    } else if (i == 7) {
                        piezas[i][j] = new Rey("Blanco", i, j);
                    }
                }
            }
        }
        for (int i = 0; i < MatrizBotones.length; i++) {
            for (int j = 0; j < MatrizBotones.length; j++) {
                if (piezas[i][j] == null) {
                } else {
                    MatrizBotones[i][j].setIcon(piezas[i][j].getIcon());
                }
            }
        }
        if (turno) {
            jug_turno.setText("Jugador 1");
        } else {
            jug_turno.setText("Jugador 2");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jp_botones = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jt_x1 = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jt_y1 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jt_x2 = new javax.swing.JTextField();
        jt_y2 = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jb_mover = new javax.swing.JButton();
        hola = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jug_turno = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jp_botones.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, java.awt.Color.darkGray));
        jp_botones.setPreferredSize(new java.awt.Dimension(570, 570));

        javax.swing.GroupLayout jp_botonesLayout = new javax.swing.GroupLayout(jp_botones);
        jp_botones.setLayout(jp_botonesLayout);
        jp_botonesLayout.setHorizontalGroup(
            jp_botonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 568, Short.MAX_VALUE)
        );
        jp_botonesLayout.setVerticalGroup(
            jp_botonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 568, Short.MAX_VALUE)
        );

        jLabel9.setText("Turno de:");

        jLabel1.setText("Posicion de Pieza a Mover:");

        jLabel2.setText("X");

        jLabel12.setText("Y");

        jLabel6.setText("Posicion del  movimiento:");

        jLabel11.setText("X");

        jLabel10.setText("Y");

        jb_mover.setText("Mover");
        jb_mover.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jb_moverMouseClicked(evt);
            }
        });

        hola.setText("Seleccione un boton");

        jLabel7.setText("para ver su posicion");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jp_botones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 56, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(94, 94, 94))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(87, 87, 87))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jt_x1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(63, 63, 63)
                                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jt_y1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jt_x2, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jt_y2, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(57, 57, 57))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addGap(140, 140, 140))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jug_turno, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(44, 44, 44))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jb_mover)
                                .addGap(115, 115, 115))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(106, 106, 106)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel7)
                            .addComponent(hola))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(hola, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel7)
                        .addGap(38, 38, 38)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jt_x1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12)
                            .addComponent(jt_y1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(35, 35, 35)
                        .addComponent(jLabel6)
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jt_x2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jt_y2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel10)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jb_mover)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jug_turno, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(130, 130, 130))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jp_botones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jb_moverMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb_moverMouseClicked
        // TODO add your handling code here:
        try {
            boolean comb = false;
            boolean existe = true;
            String col;
            if (turno) {
                col = "blanco";
            } else {
                col = "negro";
            }
            int xi = Integer.parseInt(jt_x1.getText());
            int yi = Integer.parseInt(jt_y1.getText());
            int xf = Integer.parseInt(jt_x2.getText());
            int yf = Integer.parseInt(jt_y2.getText());
            Pieza h = piezas[xi][yi];
            if (h == null) {
                existe = false;
            } else {
                existe = true;
            }
            if (existe) {
                if (turno == true && h.getColor().equals("Blanco")) {
                    comb = true;
                } else if (turno == false && h.getColor().equals("Negro")) {
                    comb = true;
                } else {
                    JOptionPane.showMessageDialog(null, "Seleccione una pieza que pertenezca a su color.");
                }
                if (comb) {

                    ArrayList<Posicion> comp = new ArrayList();
                    if (h instanceof Caballo) {
                        boolean move = false;
                        if (piezas[xf][yf] != null) {
                            if (piezas[xf][yf].getColor().equalsIgnoreCase(col)) {
                                JOptionPane.showMessageDialog(this, "No se pueden comer piezas del mismo color.");
                            } else {
                                move = MoverCaballo(xi, yi, xf, yf);
                                if (move) {
                                    piezas[xf][yf] = null;
                                    piezas[xi][yi].setPosX(xf);
                                    piezas[xi][yi].setPosY(yf);
                                    piezas[xf][yf] = piezas[xi][yi];
                                    piezas[xi][yi] = null;
                                    actualizar();
                                    gana();
                                    turno = !turno;
                                } else {
                                    JOptionPane.showMessageDialog(this, "Movimiento no valido!");
                                }
                            }
                        } else {
                            move = MoverCaballo(xi, yi, xf, yf);
                            if (move) {
                                piezas[xi][yi].setPosX(xf);
                                piezas[xi][yi].setPosY(yf);
                                piezas[xf][yf] = piezas[xi][yi];
                                piezas[xi][yi] = null;
                                actualizar();
                                gana();
                                turno = !turno;
                            } else {
                                JOptionPane.showMessageDialog(this, "Movimiento no valido!");
                            }
                        }
                    } else if (h instanceof Peon) {
                        boolean move = false;
                        int current;
                        if (turno) {
                            current = 1;
                        } else {
                            current = 2;
                        }
                        if (piezas[xf][yf] != null) {
                            if (piezas[xf][yf].getColor().equalsIgnoreCase(col)) {
                                JOptionPane.showMessageDialog(this, "No se pueden comer piezas del mismo color.");
                            } else {
                                move = MoverPeon(xi, yi, xf, yf, piezas, current);
                                if (move) {
                                    piezas[xf][yf] = null;
                                    piezas[xi][yi].setPosX(xf);
                                    piezas[xi][yi].setPosY(yf);
                                    piezas[xf][yf] = piezas[xi][yi];
                                    piezas[xi][yi] = null;
                                    actualizar();
                                    gana();
                                    turno = !turno;
                                } else {
                                    JOptionPane.showMessageDialog(this, "Movimiento no valido!");
                                }
                            }
                        } else {
                            move = MoverPeon(xi, yi, xf, yf, piezas, current);
                            if (move) {
                                piezas[xf][yf] = null;
                                piezas[xi][yi].setPosX(xf);
                                piezas[xi][yi].setPosY(yf);
                                piezas[xf][yf] = piezas[xi][yi];
                                piezas[xi][yi] = null;
                                actualizar();
                                gana();
                                turno = !turno;
                            } else {
                                JOptionPane.showMessageDialog(this, "Movimiento no valido!");
                            }
                        }
                    } else {
                        boolean mover = false;
                        comp = h.Movimientos(piezas);
                        for (int i = 0; i < comp.size(); i++) {
                            if ((comp.get(i).getX() == xf) && (comp.get(i).getY() == yf)) {
                                mover = true;
                                break;
                            }
                        }
                        if (mover) {
                            piezas[xf][yf] = null;
                            piezas[xi][yi].setPosX(xf);
                            piezas[xi][yi].setPosY(yf);
                            piezas[xf][yf] = piezas[xi][yi];
                            piezas[xi][yi] = null;
                            actualizar();
                            gana();
                            turno = !turno;
                        } else {
                            JOptionPane.showMessageDialog(this, "Movimiento no valido!");
                        }
                    }
                    actualizar();
                    jt_x2.setText("");
                    jt_x1.setText("");
                    jt_y2.setText("");
                    jt_y1.setText("");
                }
            } else {
                jt_x2.setText("");
                jt_x1.setText("");
                jt_y2.setText("");
                jt_y1.setText("");
                JOptionPane.showMessageDialog(this, "No existe un pieza en la coordenada seleccionada!");
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jb_moverMouseClicked
public void actualizar() {
        if (HayElementos()) {
            EliminarRecursiva(MatrizBotones, 7, 7);
            jp_botones.removeAll();
            RedibujarTablero();
        }
        if (ValidarDimensiones()) {
            MatrizBotones = new JButton[DimensionX][DimensionY];
            jp_botones.setLayout(new GridLayout(DimensionX, DimensionY));
            ObtenerObjetos(DimensionX, DimensionY);
            for (int contadorX = 0; contadorX < DimensionX; contadorX++) {
                for (int contadorY = 0; contadorY < DimensionY; contadorY++) {
                    JButton btnNuevo = new JButton();
                    if ((contadorX + contadorY) % 2 == 0) {
                        btnNuevo.setBackground(java.awt.Color.BLACK);
                    } else {
                        btnNuevo.setBackground(java.awt.Color.WHITE);
                    }
                    btnNuevo.setSize(TamX, TamY);
                    btnNuevo.setToolTipText(Integer.toString(contadorX) + "," + Integer.toString(contadorY));
                    MatrizBotones[contadorX][contadorY] = btnNuevo;
                    MatrizBotones[contadorX][contadorY].addActionListener(new ActionListener() {
                        public void actionPerformed(ActionEvent e) {
                            Click(btnNuevo);
                        }
                    });
                    jp_botones.add(MatrizBotones[contadorX][contadorY]);
                    RedibujarTablero();
                }
            }
        }
        for (int i = 0; i < MatrizBotones.length; i++) {
            for (int j = 0; j < MatrizBotones.length; j++) {
                if (piezas[i][j] == null) {
                } else {
                    MatrizBotones[i][j].setIcon(piezas[i][j].getIcon());
                }
            }
        }
        if (turno) {
            jug_turno.setText(jug1);
        } else {
            jug_turno.setText(jug2);
        }
    }
    public boolean MoverCaballo(int startRow, int startColumn, int desRow, int desColumn) {

        if (desRow == (startRow - 2) && desColumn == (startColumn - 1)) {
            return true;
        } else if (desRow == (startRow - 2) && desColumn == (startColumn + 1)) {
            return true;
        } else if (desRow == (startRow + 2) && desColumn == (startColumn - 1)) {
            return true;
        } else if (desRow == (startRow + 2) && desColumn == (startColumn + 1)) {
            return true;
        } else if (desRow == (startRow - 1) && desColumn == (startColumn - 2)) {
            return true;
        } else if (desRow == (startRow - 1) && desColumn == (startColumn + 2)) {
            return true;
        } else if (desRow == (startRow + 1) && desColumn == (startColumn - 2)) {
            return true;
        } else if (desRow == (startRow + 1) && desColumn == (startColumn + 2)) {
            return true;
        }

        return false;

    }

    public void gana() {
        int cont = 0;
        for (int i = 0; i < piezas.length; i++) {
            for (int j = 0; j < piezas.length; j++) {
                if (piezas[i][j] instanceof Rey) {
                    cont++;
                }
            }
        }
        String gana;
        if (turno) {
            gana = jug1;
        } else {
            gana = jug2;
        }
        if (cont == 2) {

        } else {
            JOptionPane.showMessageDialog(this, "Felicidades ha ganado " + gana);
        }
    }

    public boolean MoverPeon(int startRow, int startColumn, int desRow, int desColumn, Pieza[][] playerMatrix, int currentPlayer) {

        boolean legalMove = true;
        int[] playerPawnStart = {6, 1};
        if ((currentPlayer == 1 && desRow >= startRow) || (currentPlayer == 2 && desRow <= startRow)) {
            legalMove = false;
        } else if (desColumn != startColumn) {
            if ((desColumn > startColumn && desColumn == (startColumn + 1)) || (desColumn < startColumn && desColumn == (startColumn - 1))) {
                if ((desRow == (startRow + 1) && currentPlayer == 2) || (desRow == (startRow - 1) && currentPlayer == 1)) {
                    if (playerMatrix[desRow][desColumn] == null) {
                        legalMove = false;
                    }
                } else {
                    legalMove = false;
                }
            } else {
                legalMove = false;
            }
        } else if ((currentPlayer == 1 && desRow < (startRow - 1)) || (currentPlayer == 2 && desRow > (startRow + 1))) {
            if ((currentPlayer == 1 && desRow == (startRow - 2)) || (currentPlayer == 2 && desRow == (startRow + 2))) {
                if (playerPawnStart[currentPlayer - 1] != startRow) {
                    legalMove = false;
                }
            } else {
                legalMove = false;
            }
        }
        return legalMove;

    }

    private void EliminarRecursiva(JButton matriz[][], int filas, int cols) {
        if (filas == matriz.length - 1 && cols == matriz[0].length - 1) {
            matriz[filas][cols] = null;
        } else {
            if (cols == matriz[0].length - 1) {
                matriz[filas][cols] = null;
                EliminarRecursiva(matriz, filas + 1, 0);
            } else {
                matriz[filas][cols] = null;
                EliminarRecursiva(matriz, filas, cols + 1);
            }
        }
    }

    private boolean HayElementos() {
        return jp_botones.getComponentCount() > 0;
    }

    private void Click(JButton btn) {
        JOptionPane.showMessageDialog(this, btn.getToolTipText());
    }

    boolean esNumerico(String valorString) {
        try {
            Integer.parseInt(valorString);
        } catch (NumberFormatException ex) {
            return false;
        }
        return true;
    }

    private boolean ValidarDimensiones() {
        boolean valido = false;
        if (esNumerico("8")) {
            if (esNumerico("8")) {
                DimensionX = Integer.parseInt("8");
                DimensionY = Integer.parseInt("8");
                if (((DimensionX < 101) && (DimensionY < 101)) && ((DimensionX > 0) && (DimensionY > 0))) {
                    return true;
                }
            }
        }
        return valido;
    }

    private void ObtenerObjetos(int cantX, int cantY) {
        TamX = TableroX / cantX;
        TamY = TableroY / cantY;
    }

    private void RedibujarTablero() {
        jp_botones.validate();
        jp_botones.repaint();
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel hola;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JButton jb_mover;
    private javax.swing.JPanel jp_botones;
    private javax.swing.JTextField jt_x1;
    private javax.swing.JTextField jt_x2;
    private javax.swing.JTextField jt_y1;
    private javax.swing.JTextField jt_y2;
    private javax.swing.JLabel jug_turno;
    // End of variables declaration//GEN-END:variables
String jug1, jug2;
    int DimensionX = 8;
    int DimensionY = 8;
    int TamX = 0;
    int TamY = 0;
    static final int TableroX = 456;
    static final int TableroY = 456;
    JButton[][] MatrizBotones;
    Pieza[][] piezas = new Pieza[8][8];
    boolean turno = true;
    boolean ganar = false;
}
